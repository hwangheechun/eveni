// CPP_Study2.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
using namespace std;



int main()
{
    char ch = 97;    //char은 알파벳 숫자/문자를 나타내며 숫자 97은 아스키 코드로 변환되어 저장된다.97은 소문자 a. 따라서 a 출력
    char ch2 = 'b';
    char ch3 = 'b' + 1;

    //국제화 시대에는 영어만으로 서비스 x -> 전세계 모든 문자에 대해 유일 코드를 부여한 것이 유니코드(unicode)
    //유니코드의 표기 방식에는 대표적으로 UTF8 UTF16
    
    //UTF8
    //알파벳, 숫자 1바이트(ASCII 동일)
    //유럽 지역의 문자는 2바이트
    //한글, 한자 등 3바이트

    //UTF16
    //거의 대부분의 문자가 2바이트
    //예외적인 고대 문자만 4바이트(사실상 무시) 

    wchar_t wch = L'안';

    //ESCAPE SEQUENCE
    //표기하기 애매한 애들을 표현
    //\t = 아스키코드 9 = Tab
    //\n = 아스키코드 10 = LineFeed (한 줄 아래로)
    //\r = 아스키코드 13 = CarriageReturn (커서 <<)
    //\' = 작은 따옴표

    //문자열
    //문자들이 열을 지어서 모여 있는 것
    //정수는 1~8바이트의 고정 길이
    //문자열은 \0로 문자열의 끝을 나타낸다

    cout << ch << ch2 << ch3 << endl; 

    //cout은 char 전용
    wcout.imbue(locale("kor")); //한국어 인식
    wcout << wch << endl;

    char str[] = { 'h','e','l','l','o', '\0'};  //전역변수는 데이터 영역, 지역변수는 스택 영역.
    char str2[] = "Hello World";
    wchar_t str3[] = L"Hello World";

    cout << str << endl;
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
